@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quizzy - Interactive Quiz</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --accent-color: #8672FF;
            --text-color: #2E2B41;
            --success-color: #4cd964;
            --warning-color: #ff9500;
            --danger-color: #ff3b30;
            --light-accent: rgba(134, 114, 255, 0.1);
        }

        body {
            background-color: #f9fafc;
            color: var(--text-color);
            font-family: 'Inter', 'Segoe UI', sans-serif;
            min-height: 100vh;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            width: 100%;
            overflow-x: hidden;
        }

        .navbar {
            background-color: var(--accent-color);
            padding: 12px 24px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            color: white;
            font-size: 24px;
            font-weight: 700;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .student-profile {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--accent-color);
            font-weight: 600;
            font-size: 18px;
        }

        .student-name {
            color: white;
            font-weight: 500;
        }

        .quiz-info-bar {
            background-color: white;
            padding: 12px 24px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
        }

        .info-card {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .info-icon {
            width: 32px;
            height: 32px;
            border-radius: 8px;
            background-color: var(--light-accent);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--accent-color);
            font-size: 16px;
            flex-shrink: 0;
        }

        .timer-icon {
            color: var(--warning-color);
            background-color: rgba(255, 149, 0, 0.1);
        }

        .progress-icon {
            color: var(--success-color);
            background-color: rgba(76, 217, 100, 0.1);
        }

        .info-text {
            display: flex;
            flex-direction: column;
            min-width: 0;
        }

        .info-label {
            font-size: 14px;
            color: #6b7280;
        }

        .info-value {
            font-size: 16px;
            font-weight: 600;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .remaining-time {
            color: var(--warning-color);
        }

        .container {
            max-width: 800px;
            margin: 20px auto;
            padding: 0 20px;
        }

        .question-container {
            border: 1px solid #ddd;
            border-radius: 8px;
            background-color: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            overflow: hidden;
        }

        .question-header {
            padding: 20px;
        }

        .question-number {
            font-size: 14px;
            color: #6b7280;
            margin-bottom: 8px;
        }

        .question-text {
            font-size: 18px;
            margin: 0;
            line-height: 1.4;
        }

        .question-body {
            padding: 0 20px 20px;
        }

        .answer-area {
            margin-bottom: 20px;
        }

            .answer-area label {
                display: block;
                font-weight: 500;
                margin-bottom: 8px;
                color: var(--text-color);
            }

            .answer-area textarea {
                width: 100%;
                height: 150px;
                padding: 12px;
                font-size: 16px;
                border-radius: 8px;
                border: 1px solid #e6e8eb;
                resize: vertical;
                font-family: inherit;
            }

                .answer-area textarea:focus {
                    outline: none;
                    border-color: var(--accent-color);
                    box-shadow: 0 0 0 2px var(--light-accent);
                }

        .options-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
            margin-bottom: 20px;
        }

        .option-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 16px;
            border: 1px solid #e6e8eb;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s;
        }

            .option-item:hover {
                border-color: var(--accent-color);
                background-color: var(--light-accent);
            }

            .option-item.selected {
                border-color: var(--accent-color);
                background-color: var(--light-accent);
            }

        .option-marker {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: white;
            border: 1px solid #e6e8eb;
            font-weight: 600;
            color: var(--text-color);
            flex-shrink: 0;
        }

        .option-item.selected .option-marker {
            background-color: var(--accent-color);
            color: white;
            border-color: var(--accent-color);
        }

        .option-text {
            font-size: 16px;
            flex-grow: 1;
        }

        .progress-container {
            margin-top: 20px;
        }

        .progress-bar {
            height: 6px;
            background-color: rgba(76, 217, 100, 0.15);
            border-radius: 10px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4cd964, #34c759);
            border-radius: 10px;
            transition: width 0.5s ease;
        }

        .question-footer {
            padding: 16px 24px;
            border-top: 1px solid #e6e8eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 16px;
        }

        .question-pagination {
            display: flex;
            gap: 8px;
            align-items: center;
            flex-wrap: wrap;
        }

        .pagination-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: #e6e8eb;
            cursor: pointer;
            transition: all 0.2s;
        }

            .pagination-dot.active {
                background-color: var(--accent-color);
                transform: scale(1.2);
            }

            .pagination-dot.attempted {
                background-color: var(--success-color);
            }

        .question-navigation {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .btn {
            font-family: inherit;
            font-size: 14px;
            font-weight: 500;
            border-radius: 10px;
            padding: 10px 18px;
            transition: all 0.3s;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            border: none;
            cursor: pointer;
        }

        .btn-outline {
            background-color: transparent;
            color: var(--accent-color);
            border: 1px solid #e6e8eb;
        }

            .btn-outline:hover {
                background-color: #f8f9fd;
                border-color: var(--accent-color);
            }

        .btn-primary {
            background-color: var(--accent-color);
            color: white;
        }

            .btn-primary:hover {
                background-color: #7460ff;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(108, 92, 231, 0.3);
            }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
            box-shadow: none !important;
        }

        .finish-quiz {
            padding: 16px 32px;
            background-color: white;
            border-top: 1px solid #e6e8eb;
            display: flex;
            justify-content: flex-end;
            position: sticky;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 10;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05);
        }

        .btn-danger {
            background-color: var(--danger-color);
            color: white;
        }

            .btn-danger:hover {
                background-color: #e4362c;
                box-shadow: 0 4px 12px rgba(255, 59, 48, 0.3);
            }

        .main-wrapper {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        .content-wrapper {
            flex: 1 0 auto;
            display: flex;
            flex-direction: column;
        }
    </style>
</head>

<body>
    <div class="main-wrapper">
        <div class="content-wrapper">
            <!-- Navigation Bar -->
            <nav class="navbar">
                <a href="#" class="logo">
                    <i class="fas fa-list-check"></i>
                    Quizzy
                </a>
                <div class="student-profile">
                    <div class="avatar">JS</div>
                    <div class="student-name">John Smith</div>
                </div>
            </nav>

            <!-- Quiz Info Bar -->
            <div class="quiz-info-bar">
                <div class="info-card">
                    <div class="info-icon">
                        <i class="fas fa-clipboard-list"></i>
                    </div>
                    <div class="info-text">
                        <div class="info-label">Quiz</div>
                        <div class="info-value">Introduction to Computer Science</div>
                    </div>
                </div>

                <div class="info-card">
                    <div class="info-icon">
                        <i class="fas fa-question-circle"></i>
                    </div>
                    <div class="info-text">
                        <div class="info-label">Questions</div>
                        <div class="info-value" id="questions-counter">1 / 10</div>
                    </div>
                </div>

                <div class="info-card">
                    <div class="info-icon progress-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="info-text">
                        <div class="info-label">Attempted</div>
                        <div class="info-value" id="attempted-counter">0 / 10</div>
                    </div>
                </div>

                <div class="info-card">
                    <div class="info-icon timer-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="info-text">
                        <div class="info-label">Time Remaining</div>
                        <div class="info-value remaining-time" id="time-remaining">30:00</div>
                    </div>
                </div>
            </div>

            <!-- Main Content -->
            <div class="container">
                <div class="question-container">
                    <div class="question-header">
                        <div class="question-number" id="question-number">Question 1 of 10</div>
                        <h2 class="question-text" id="question-text">Loading question...</h2>
                    </div>

                    <div class="question-body">
                        <!-- Content will be dynamically inserted here -->
                        <div id="question-content"></div>

                        <div class="progress-container">
                            <div class="progress-bar">
                                <div class="progress-fill" id="progress-fill" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="question-footer">
                <div class="question-pagination" id="question-pagination">
                    <!-- Pagination dots will be inserted here -->
                </div>

                <div class="question-navigation">
                    <button class="btn btn-outline" id="prev-btn">
                        <i class="fas fa-arrow-left"></i>
                        <span>Previous</span>
                    </button>
                    <button class="btn btn-primary" id="next-btn">
                        <span>Next</span>
                        <i class="fas fa-arrow-right"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Finish Quiz Button -->
    <div class="finish-quiz">
        <button class="btn btn-danger" id="finish-btn">
            <i class="fas fa-flag-checkered"></i>
            <span>Finish Quiz</span>
        </button>
    </div>

    <script>
        // Quiz data with improved structure for different question types
        const quizData = [
            {
                id: 1,
                type: "multiple-choice",
                question: "What does CPU stand for?",
                options: [
                    "Central Processing Unit",
                    "Computer Personal Unit",
                    "Central Process Unit",
                    "Central Processor Unit"
                ],
                correctAnswer: 0,
                userAnswer: null
            },
            {
                id: 2,
                type: "multiple-choice",
                question: "Which programming language is known as the 'mother of all programming languages'?",
                options: [
                    "Java",
                    "Python",
                    "C",
                    "Assembly"
                ],
                correctAnswer: 2,
                userAnswer: null
            },
            {
                id: 3,
                type: "short-answer",
                question: "Explain the difference between primary and secondary memory in a computer system.",
                userAnswer: ""
            },
            {
                id: 4,
                type: "short-answer",
                question: "Describe how a binary search algorithm works and its time complexity.",
                userAnswer: ""
            },
            {
                id: 5,
                type: "multiple-choice",
                question: "Which data structure operates on a LIFO principle?",
                options: [
                    "Queue",
                    "Stack",
                    "Linked List",
                    "Tree"
                ],
                correctAnswer: 1,
                userAnswer: null
            },
            {
                id: 6,
                type: "multiple-choice",
                question: "What is the time complexity of the quicksort algorithm in the average case?",
                options: [
                    "O(n)",
                    "O(n²)",
                    "O(n log n)",
                    "O(log n)"
                ],
                correctAnswer: 2,
                userAnswer: null
            },
            {
                id: 7,
                type: "short-answer",
                question: "Explain the concept of encapsulation in object-oriented programming.",
                userAnswer: ""
            },
            {
                id: 8,
                type: "short-answer",
                question: "What is the difference between HTTP and HTTPS protocols?",
                userAnswer: ""
            },
            {
                id: 9,
                type: "multiple-choice",
                question: "Which of the following is not a valid JavaScript data type?",
                options: [
                    "String",
                    "Boolean",
                    "Character",
                    "Number"
                ],
                correctAnswer: 2,
                userAnswer: null
            },
            {
                id: 10,
                type: "short-answer",
                question: "Explain the concept of recursion and provide a simple example.",
                userAnswer: ""
            }
        ];

        // Initialize variables
        let currentQuestionIndex = 0;
        let totalQuestions = quizData.length;
        let timerInterval;
        let secondsRemaining = 30 * 60; // 30 minutes in seconds

        // DOM Elements
        const questionNumberEl = document.getElementById('question-number');
        const questionTextEl = document.getElementById('question-text');
        const questionContentEl = document.getElementById('question-content');
        const progressFill = document.getElementById('progress-fill');
        const prevButton = document.getElementById('prev-btn');
        const nextButton = document.getElementById('next-btn');
        const finishButton = document.getElementById('finish-btn');
        const paginationContainer = document.getElementById('question-pagination');
        const questionsCounterEl = document.getElementById('questions-counter');
        const attemptedCounterEl = document.getElementById('attempted-counter');
        const timeRemainingEl = document.getElementById('time-remaining');

        // Initialize quiz
        function initQuiz() {
            renderQuestion(currentQuestionIndex);
            renderPagination();
            updateInfoBar();
            startTimer();

            // Add event listeners
            prevButton.addEventListener('click', goToPreviousQuestion);
            nextButton.addEventListener('click', goToNextQuestion);
            finishButton.addEventListener('click', finishQuiz);

            // Adjust layout
            adjustLayout();
        }

        // Render current question
        function renderQuestion(index) {
            const question = quizData[index];

            // Update question text and number
            questionNumberEl.textContent = `Question ${index + 1} of ${totalQuestions}`;
            questionTextEl.textContent = question.question;

            // Clear existing content
            questionContentEl.innerHTML = '';

            // Render based on question type
            if (question.type === "multiple-choice") {
                renderMultipleChoice(question);
            } else if (question.type === "short-answer") {
                renderShortAnswer(question);
            }

            // Update buttons state
            prevButton.disabled = index === 0;
            nextButton.disabled = index === totalQuestions - 1;

            // Update progress bar
            updateProgressBar();
        }

        // Render multiple choice question
        function renderMultipleChoice(question) {
            const optionsList = document.createElement('div');
            optionsList.className = 'options-list';

            question.options.forEach((option, i) => {
                const isSelected = question.userAnswer === i;
                const optionMarker = String.fromCharCode(65 + i); // A, B, C, D...

                const optionItem = document.createElement('div');
                optionItem.className = `option-item${isSelected ? ' selected' : ''}`;
                optionItem.dataset.index = i;

                optionItem.innerHTML = `
                    <div class="option-marker">${optionMarker}</div>
                    <div class="option-text">${option}</div>
                `;

                optionItem.addEventListener('click', () => selectOption(i));
                optionsList.appendChild(optionItem);
            });

            questionContentEl.appendChild(optionsList);
        }

        // Render short answer question
        function renderShortAnswer(question) {
            const answerArea = document.createElement('div');
            answerArea.className = 'answer-area';

            answerArea.innerHTML = `
                <label for="short-answer">Your Answer:</label>
                <textarea id="short-answer" name="short-answer"
                    placeholder="Type your answer here...">${question.userAnswer}</textarea>
            `;

            questionContentEl.appendChild(answerArea);

            // Add event listener to save answer
            const textarea = answerArea.querySelector('textarea');
            textarea.addEventListener('input', (e) => {
                quizData[currentQuestionIndex].userAnswer = e.target.value;
                updateProgressBar();
                renderPagination();
                updateInfoBar();
            });
        }

        // Select an option for multiple choice questions
        function selectOption(optionIndex) {
            // Save user's answer
            quizData[currentQuestionIndex].userAnswer = optionIndex;

            // Update UI
            document.querySelectorAll('.option-item').forEach((item, i) => {
                if (i === optionIndex) {
                    item.classList.add('selected');
                } else {
                    item.classList.remove('selected');
                }
            });

            // Update pagination, progress, and counters
            renderPagination();
            updateProgressBar();
            updateInfoBar();
        }

        // Save short answer before navigation
        function saveShortAnswer() {
            const question = quizData[currentQuestionIndex];
            if (question.type === "short-answer") {
                const textarea = document.getElementById('short-answer');
                if (textarea) {
                    question.userAnswer = textarea.value;
                }
            }
        }

        // Go to next question
        function goToNextQuestion() {
            if (currentQuestionIndex < totalQuestions - 1) {
                saveShortAnswer();
                currentQuestionIndex++;
                renderQuestion(currentQuestionIndex);
                renderPagination();
                updateInfoBar();
            }
        }

        // Go to previous question
        function goToPreviousQuestion() {
            if (currentQuestionIndex > 0) {
                saveShortAnswer();
                currentQuestionIndex--;
                renderQuestion(currentQuestionIndex);
                renderPagination();
                updateInfoBar();
            }
        }

        // Go to specific question
        function goToQuestion(index) {
            saveShortAnswer();
            currentQuestionIndex = index;
            renderQuestion(currentQuestionIndex);
            renderPagination();
            updateInfoBar();
        }

        // Render pagination dots
        function renderPagination() {
            paginationContainer.innerHTML = '';

            quizData.forEach((question, i) => {
                const dot = document.createElement('div');

                if (i === currentQuestionIndex) {
                    dot.className = 'pagination-dot active';
                } else if (isAttempted(question)) {
                    dot.className = 'pagination-dot attempted';
                } else {
                    dot.className = 'pagination-dot';
                }

                // Make dots clickable to jump to questions
                dot.addEventListener('click', () => goToQuestion(i));
                paginationContainer.appendChild(dot);
            });
        }

        // Check if question is attempted
        function isAttempted(question) {
            if (question.type === "multiple-choice") {
                return question.userAnswer !== null;
            } else if (question.type === "short-answer") {
                return question.userAnswer && question.userAnswer.trim() !== '';
            }
            return false;
        }

        // Update progress bar
        function updateProgressBar() {
            const attemptedCount = quizData.filter(q => isAttempted(q)).length;
            const progressPercentage = (attemptedCount / totalQuestions) * 100;
            progressFill.style.width = `${progressPercentage}%`;
        }

        // Update info bar counters
        function updateInfoBar() {
            questionsCounterEl.textContent = `${currentQuestionIndex + 1} / ${totalQuestions}`;

            const attemptedCount = quizData.filter(q => isAttempted(q)).length;
            attemptedCounterEl.textContent = `${attemptedCount} / ${totalQuestions}`;
        }

        // Start timer
        function startTimer() {
            updateTimerDisplay();

            timerInterval = setInterval(() => {
                secondsRemaining--;

                if (secondsRemaining <= 0) {
                    clearInterval(timerInterval);
                    finishQuiz();
                }

                updateTimerDisplay();
            }, 1000);
        }

        // Update timer display
        function updateTimerDisplay() {
            const minutes = Math.floor(secondsRemaining / 60);
            const seconds = secondsRemaining % 60;

            timeRemainingEl.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

            // Add warning color when less than 5 minutes remaining
            if (secondsRemaining < 300) {
                timeRemainingEl.style.color = 'var(--danger-color)';
            }
        }

        // Finish quiz
        function finishQuiz() {
            saveShortAnswer();
            clearInterval(timerInterval);

            // Calculate results
            let correctAnswers = 0;
            quizData.forEach(question => {
                if (question.type === "multiple-choice" && question.userAnswer === question.correctAnswer) {
                    correctAnswers++;
                }
            });

            alert(`Quiz submitted! You've completed ${quizData.filter(q => isAttempted(q)).length} out of ${totalQuestions} questions.`);
            // In a real application, you would send the answers to the server here
        }

        // Adjust layout for small screens
        function adjustLayout() {
            const viewportHeight = window.innerHeight;
            const finishQuizHeight = document.querySelector('.finish-quiz').offsetHeight;
            const contentWrapper = document.querySelector('.content-wrapper');

            // Ensure content has enough space considering the fixed finish button
            contentWrapper.style.paddingBottom = `${finishQuizHeight}px`;
        }

        // Initialize the quiz when page loads
        window.addEventListener('DOMContentLoaded', initQuiz);

        // Adjust layout on resize
        window.addEventListener('resize', adjustLayout);
    </script>
</body>

</html>
