@{
    var student = ViewBag.stu as Quizzy.Models.Buisness_Models.Student;
    var sub = ViewBag.sub as Quizzy.Models.Buisness_Models.subject_model;
    var quiz = ViewBag.QuizData as Quizzy.Models.Buisness_Models.quiz_model;
    var mcqs = ViewBag.mcq as System.Data.DataTable;
    var shq = ViewBag.shq as System.Data.DataTable;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Attempt Quiz - Quizzy</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/attemptMcqs.css" />
</head>

<body>
    <div class="main-wrapper">
        <div class="content-wrapper">
            <!-- Navbar -->
            <nav class="navbar">
                <a href="#" class="logo">
                    <i class="fas fa-graduation-cap brand-icon"></i>
                    Quizzy
                </a>
                <div class="student-profile">
                    <div class="student-name">@student.first_name @student.last_name</div>
                </div>
            </nav>

            <!-- Quiz Info Bar -->
            <div class="quiz-info-bar">
                <div class="info-card">
                    <div class="info-icon">
                        <i class="fas fa-clipboard-list"></i>
                    </div>
                    <div class="info-text">
                        <div class="info-label">Quiz</div>
                        <div class="info-value">@quiz.quizName (@sub.code)</div>
                    </div>
                </div>

                <div class="info-card">
                    <div class="info-icon">
                        <i class="fas fa-question-circle"></i>
                    </div>
                    <div class="info-text">
                        <div class="info-label">Questions</div>
                        <div class="info-value" id="questions-counter">1 / 10</div>
                    </div>
                </div>

                <div class="info-card">
                    <div class="info-icon progress-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="info-text">
                        <div class="info-label">Attempted</div>
                        <div class="info-value" id="attempted-counter">0 / 10</div>
                    </div>
                </div>

                <div class="info-card">
                    <div class="info-icon timer-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="info-text">
                        <div class="info-label">Time Remaining</div>
                        <div class="info-value remaining-time" id="time-remaining">30:00</div>
                    </div>
                </div>
            </div>

            <!-- Main Content -->
            <div class="container">
                <div class="question-container">
                    <div class="question-header">
                        <div class="question-number" id="question-number">Question 1 of 10</div>
                        <h2 class="question-text" id="question-text">Loading question...</h2>
                    </div>

                    <div class="question-body">
                        <!-- Content will be dynamically inserted here -->
                        <div id="question-content"></div>

                        <div class="progress-container">
                            <div class="progress-bar">
                                <div class="progress-fill" id="progress-fill" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="question-footer">
                <div class="question-pagination" id="question-pagination">
                    <!-- Pagination dots will be inserted here -->
                </div>

                <div class="question-navigation">
                    <button class="btn btn-outline" id="prev-btn">
                        <i class="fas fa-arrow-left"></i>
                        <span>Previous</span>
                    </button>
                    <button class="btn btn-primary" id="next-btn">
                        <span>Next</span>
                        <i class="fas fa-arrow-right"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Finish Quiz Button -->
    <div class="finish-quiz">
        <button class="btn btn-danger" id="finish-btn">
            <i class="fas fa-flag-checkered"></i>
            <span>Finish Quiz</span>
        </button>
    </div>

    <!-- Modal for quiz submission confirmation -->
    <div class="modal" id="submit-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Submit Quiz</h3>
                <span class="close-modal">&times;</span>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to submit this quiz?</p>
                <div class="quiz-summary">
                    <p><strong>Total Questions:</strong> <span id="total-questions-count">0</span></p>
                    <p><strong>Attempted Questions:</strong> <span id="attempted-questions-count">0</span></p>
                    <p><strong>Unattempted Questions:</strong> <span id="unattempted-questions-count">0</span></p>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" id="cancel-submit">Cancel</button>
                <button class="btn btn-danger" id="confirm-submit">Submit Quiz</button>
            </div>
        </div>
    </div>

    <!-- Modal for time's up -->
    <div class="modal" id="timeout-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Time's Up!</h3>
            </div>
            <div class="modal-body">
                <p>Your quiz time has expired. Your answers have been automatically submitted.</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" id="timeout-ok">OK</button>
            </div>
        </div>
    </div>

    <script>
        // Quiz data with improved structure for different question types
        const quizData = [
        @if (mcqs != null && mcqs.Rows.Count > 0)
        {
            for (int i = 0; i < mcqs.Rows.Count; i++)
            {
                var row = mcqs.Rows[i];
                <text>
                            {
                                id: @row["mcqID"],
                                type: "multiple-choice",
                                question: "@row["statement"]",
                                options: [
                                    "@row["option_A"]",
                                    "@row["option_B"]",
                                    "@row["option_C"]",
                                    "@row["option_D"]"
                                ],
                                userAnswer: null,
                                correct_opt: "@row["correct_opt"]"
                            }@((i < mcqs.Rows.Count - 1 || (shq != null && shq.Rows.Count > 0)) ? "," : "")
                </text>
            }
        }

        @if (shq != null && shq.Rows.Count > 0)
        {
            for (int i = 0; i < shq.Rows.Count; i++)
            {
                var row = shq.Rows[i];
                <text>
                            {
                                id: @row["shqID"],
                                type: "short-answer",
                                question: "@row["question"]",
                                userAnswer: ""
                            }@(i < shq.Rows.Count - 1 ? "," : "")
                </text>
            }
        }
        ];

        // Initialize variables
        let currentQuestionIndex = 0;
        let totalQuestions = quizData.length;
        let timerInterval;
        let secondsRemaining = @quiz.given_time * 60; // Convert minutes to seconds
        let attemptId = null;
        const studentId = "@student.stuID";
        const quizId = "@quiz.quizID";
        const subjectId = "@sub.subjectID";
        let isSubmitting = false;

        // DOM elements
        const questionNumber = document.getElementById('question-number');
        const questionText = document.getElementById('question-text');
        const questionContent = document.getElementById('question-content');
        const progressFill = document.getElementById('progress-fill');
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const finishBtn = document.getElementById('finish-btn');
        const questionsCounter = document.getElementById('questions-counter');
        const attemptedCounter = document.getElementById('attempted-counter');
        const timeRemainingEl = document.getElementById('time-remaining');
        const questionPagination = document.getElementById('question-pagination');

        // Modal elements
        const submitModal = document.getElementById('submit-modal');
        const closeModal = document.querySelector('.close-modal');
        const cancelSubmit = document.getElementById('cancel-submit');
        const confirmSubmit = document.getElementById('confirm-submit');
        const totalQuestionsCount = document.getElementById('total-questions-count');
        const attemptedQuestionsCount = document.getElementById('attempted-questions-count');
        const unattemptedQuestionsCount = document.getElementById('unattempted-questions-count');
        const timeoutModal = document.getElementById('timeout-modal');
        const timeoutOk = document.getElementById('timeout-ok');

        // Create attempt on page load
        window.addEventListener('DOMContentLoaded', async () => {
            await createAttempt();
            updateQuestionDisplay();
            updatePagination();
            updateCounters();
            startTimer();
            updateNavButtons();
        });

        // Create attempt for the quiz
        async function createAttempt() {
            try {
                const response = await fetch('/QuizAttempt/CreateAttempt', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        quizID: quizId,
                        studentID: studentId,
                        subjectID: subjectId
                    })
                });

                const data = await response.json();
                if (data.success) {
                    attemptId = data.attemptId;
                    console.log('Attempt created with ID:', attemptId);
                } else {
                    alert(`Failed to create attempt: ${data.message}`);
                    window.location.href = '/Student/Dashboard'; // Redirect to dashboard on failure
                }
            } catch (error) {
                console.error('Error creating attempt:', error);
                alert('Failed to connect to the server. Please try again.');
            }
        }

        // Display current question
        function updateQuestionDisplay() {
            const question = quizData[currentQuestionIndex];
            questionNumber.textContent = `Question ${currentQuestionIndex + 1} of ${totalQuestions}`;
            questionText.textContent = question.question;
            questionsCounter.textContent = `${currentQuestionIndex + 1} / ${totalQuestions}`;

            // Clear previous content
            questionContent.innerHTML = '';

            if (question.type === 'multiple-choice') {
                const optionsContainer = document.createElement('div');
                optionsContainer.className = 'options-container';

                const optionLabels = ['A', 'B', 'C', 'D'];

                question.options.forEach((option, index) => {
                    const optionLabel = optionLabels[index];
                    const isSelected = question.userAnswer === optionLabel;

                    const optionElement = document.createElement('div');
                    optionElement.className = `option ${isSelected ? 'selected' : ''}`;
                    optionElement.dataset.value = optionLabel;

                    optionElement.innerHTML = `
                        <div class="option-label">${optionLabel}</div>
                        <div class="option-text">${option}</div>
                    `;

                    optionElement.addEventListener('click', () => selectOption(optionElement, optionLabel));
                    optionsContainer.appendChild(optionElement);
                });

                questionContent.appendChild(optionsContainer);
            } else if (question.type === 'short-answer') {
                const textareaContainer = document.createElement('div');
                textareaContainer.className = 'textarea-container';

                const textarea = document.createElement('textarea');
                textarea.className = 'short-answer-input';
                textarea.placeholder = 'Type your answer here...';
                textarea.value = question.userAnswer || '';

                textarea.addEventListener('input', (e) => {
                    saveShortAnswer(e.target.value);
                });

                textareaContainer.appendChild(textarea);
                questionContent.appendChild(textareaContainer);
            }

            // Update progress bar
            const progress = ((currentQuestionIndex + 1) / totalQuestions) * 100;
            progressFill.style.width = `${progress}%`;
        }

        // Select option for MCQ
        async function selectOption(optionElement, optionValue) {
            // Remove selected class from all options
            document.querySelectorAll('.option').forEach(opt => {
                opt.classList.remove('selected');
            });

            // Add selected class to clicked option
            optionElement.classList.add('selected');

            // Update quiz data
            const currentQuestion = quizData[currentQuestionIndex];
            currentQuestion.userAnswer = optionValue;

            // Save answer to server
            await saveMcqAnswer(currentQuestion.id, optionValue);

            // Update counters
            updateCounters();
            updatePagination();
        }

        // Save MCQ answer to server
        async function saveMcqAnswer(mcqId, answer) {
            try {
                const response = await fetch('/QuizAttempt/SaveMcqAnswer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        mcqID: mcqId,
                        studentID: studentId,
                        answer: answer
                    })
                });

                const data = await response.json();
                if (!data.success) {
                    console.error('Failed to save MCQ answer:', data.message);
                }
            } catch (error) {
                console.error('Error saving MCQ answer:', error);
            }
        }

        // Save short answer to server
        async function saveShortAnswer(answerText) {
            const currentQuestion = quizData[currentQuestionIndex];
            currentQuestion.userAnswer = answerText;

            try {
                const response = await fetch('/QuizAttempt/SaveShqAnswer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        shqID: currentQuestion.id,
                        studentID: studentId,
                        answer: answerText
                    })
                });

                const data = await response.json();
                if (!data.success) {
                    console.error('Failed to save short answer:', data.message);
                }

                // Only update if answer has content
                if (answerText.trim().length > 0) {
                    updateCounters();
                    updatePagination();
                }
            } catch (error) {
                console.error('Error saving short answer:', error);
            }
        }

        // Update attempted questions counter
        function updateCounters() {
            const attemptedQuestions = quizData.filter(q =>
                (q.type === 'multiple-choice' && q.userAnswer !== null) ||
                (q.type === 'short-answer' && q.userAnswer && q.userAnswer.trim() !== '')
            );

            attemptedCounter.textContent = `${attemptedQuestions.length} / ${totalQuestions}`;
        }

        // Create and update pagination dots
        function updatePagination() {
            questionPagination.innerHTML = '';

            quizData.forEach((question, index) => {
                const dot = document.createElement('div');
                dot.className = 'pagination-dot';

                if (index === currentQuestionIndex) {
                    dot.classList.add('active');
                }

                if ((question.type === 'multiple-choice' && question.userAnswer !== null) ||
                    (question.type === 'short-answer' && question.userAnswer && question.userAnswer.trim() !== '')) {
                    dot.classList.add('answered');
                }

                dot.addEventListener('click', () => {
                    currentQuestionIndex = index;
                    updateQuestionDisplay();
                    updatePagination();
                    updateNavButtons();
                });

                questionPagination.appendChild(dot);
            });
        }

        // Update navigation buttons state
        function updateNavButtons() {
            prevBtn.disabled = currentQuestionIndex === 0;
            nextBtn.disabled = currentQuestionIndex === totalQuestions - 1;
        }

        // Navigate to previous question
        prevBtn.addEventListener('click', () => {
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                updateQuestionDisplay();
                updatePagination();
                updateNavButtons();
            }
        });

        // Navigate to next question
        nextBtn.addEventListener('click', () => {
            if (currentQuestionIndex < totalQuestions - 1) {
                currentQuestionIndex++;
                updateQuestionDisplay();
                updatePagination();
                updateNavButtons();
            }
        });

        // Timer functions
        function startTimer() {
            timerInterval = setInterval(updateTimer, 1000);
            updateTimer();
        }

        function updateTimer() {
            if (secondsRemaining <= 0) {
                clearInterval(timerInterval);
                handleTimeUp();
                return;
            }

            secondsRemaining--;

            const minutes = Math.floor(secondsRemaining / 60);
            const seconds = secondsRemaining % 60;

            timeRemainingEl.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

            // Change color when time is running low
            if (secondsRemaining < 60) {
                timeRemainingEl.classList.add('warning');
            }
            if (secondsRemaining < 30) {
                timeRemainingEl.classList.add('danger');
            }
        }

        function handleTimeUp() {
            if (!isSubmitting) {
                isSubmitting = true;
                submitQuiz(true);
                showTimeoutModal();
            }
        }

        // Show timeout modal
        function showTimeoutModal() {
            timeoutModal.style.display = 'flex';
        }

        // Handle timeout modal OK button
        timeoutOk.addEventListener('click', () => {
            timeoutModal.style.display = 'none';
            window.location.href = `/Student/Dashboard`; // Redirect to dashboard
        });

        // Finish quiz button
        finishBtn.addEventListener('click', () => {
            showSubmitModal();
        });

        // Show submit confirmation modal
        function showSubmitModal() {
            const attemptedQuestions = quizData.filter(q =>
                (q.type === 'multiple-choice' && q.userAnswer !== null) ||
                (q.type === 'short-answer' && q.userAnswer && q.userAnswer.trim() !== '')
            );

            totalQuestionsCount.textContent = totalQuestions;
            attemptedQuestionsCount.textContent = attemptedQuestions.length;
            unattemptedQuestionsCount.textContent = totalQuestions - attemptedQuestions.length;

            submitModal.style.display = 'flex';
        }

        // Modal close button
        closeModal.addEventListener('click', () => {
            submitModal.style.display = 'none';
        });

        // Cancel submit button
        cancelSubmit.addEventListener('click', () => {
            submitModal.style.display = 'none';
        });

        // Confirm submit button
        confirmSubmit.addEventListener('click', async () => {
            if (!isSubmitting) {
                isSubmitting = true;
                confirmSubmit.disabled = true;
                confirmSubmit.textContent = 'Submitting...';

                await submitQuiz(false);
            }
        });

        // Submit quiz to server
        async function submitQuiz(isTimeout) {
            try {
                const response = await fetch('/QuizAttempt/SubmitQuiz', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        quizID: quizId,
                        studentID: studentId
                    })
                });

                const data = await response.json();

                if (data.success) {
                    if (!isTimeout) {
                        alert('Quiz submitted successfully!');
                        submitModal.style.display = 'none';
                        window.location.href = `/Student/Dashboard`;
                    }
                } else {
                    if (!isTimeout) {
                        alert(`Failed to submit quiz: ${data.message}`);
                        isSubmitting = false;
                        confirmSubmit.disabled = false;
                        confirmSubmit.textContent = 'Submit Quiz';
                    }
                }
            } catch (error) {
                console.error('Error submitting quiz:', error);
                if (!isTimeout) {
                    alert('Failed to connect to the server. Please try again.');
                    isSubmitting = false;
                    confirmSubmit.disabled = false;
                    confirmSubmit.textContent = 'Submit Quiz';
                }
            }
        }

        // Handle keyboard navigation
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft' && !prevBtn.disabled) {
                prevBtn.click();
            } else if (e.key === 'ArrowRight' && !nextBtn.disabled) {
                nextBtn.click();
            }
        });

        // Close modal when clicking outside
        window.addEventListener('click', (e) => {
            if (e.target === submitModal) {
                submitModal.style.display = 'none';
            }
        });
    </script>
</body>
</html>